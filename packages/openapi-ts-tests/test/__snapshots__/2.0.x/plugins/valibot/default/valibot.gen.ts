// This file is auto-generated by @hey-api/openapi-ts

import * as v from 'valibot';

export const vCommentWithBreaks = v.pipe(v.number(), v.integer());

export const vCommentWithBackticks = v.pipe(v.number(), v.integer());

export const vCommentWithBackticksAndQuotes = v.pipe(v.number(), v.integer());

export const vCommentWithSlashes = v.pipe(v.number(), v.integer());

export const vCommentWithExpressionPlaceholders = v.pipe(v.number(), v.integer());

export const vCommentWithQuotes = v.pipe(v.number(), v.integer());

export const vCommentWithReservedCharacters = v.pipe(v.number(), v.integer());

export const vSimpleInteger = v.pipe(v.number(), v.integer());

export const vSimpleBoolean = v.boolean();

export const vSimpleString = v.string();

export const vNonAsciiStringæøåÆøÅöôêÊ字符串 = v.string();

export const vSimpleFile = v.string();

export const vModelWithString = v.object({
    prop: v.optional(v.string())
});

export const vSimpleReference = vModelWithString;

export const vSimpleStringWithPattern = v.pipe(v.string(), v.maxLength(64), v.regex(/^[a-zA-Z0-9_]*$/));

export const vEnumWithStrings = v.picklist([
    'Success',
    'Warning',
    'Error',
    "'Single Quote'",
    '"Double Quotes"',
    'Non-ascii: øæåôöØÆÅÔÖ字符串'
]);

export const vEnumWithNumbers = v.unknown();

export const vEnumFromDescription = v.number();

export const vEnumWithExtensions = v.unknown();

export const vArrayWithNumbers = v.array(v.pipe(v.number(), v.integer()));

export const vArrayWithBooleans = v.array(v.boolean());

export const vArrayWithStrings = v.array(v.string());

export const vArrayWithReferences = v.array(vModelWithString);

export const vArrayWithArray = v.array(v.array(vModelWithString));

export const vArrayWithProperties = v.array(v.object({
    foo: v.optional(v.string()),
    bar: v.optional(v.string())
}));

export const vDictionaryWithString = v.object({});

export const vDictionaryWithReference = v.object({});

export const vDictionaryWithArray = v.object({});

export const vDictionaryWithDictionary = v.object({});

export const vDictionaryWithProperties = v.object({});

export const vDate = v.string();

export const vModelWithInteger = v.object({
    prop: v.optional(v.pipe(v.number(), v.integer()))
});

export const vModelWithBoolean = v.object({
    prop: v.optional(v.boolean())
});

export const vModelWithStringError = v.object({
    prop: v.optional(v.string())
});

export const vModelWithNullableString = v.object({
    nullableProp: v.optional(v.union([
        v.string(),
        v.null()
    ])),
    nullableRequiredProp: v.union([
        v.string(),
        v.null()
    ])
});

export const vModelWithEnum = v.object({
    test: v.optional(v.picklist([
        'Success',
        'Warning',
        'Error',
        'ØÆÅ字符串'
    ])),
    statusCode: v.optional(v.picklist([
        '100',
        '200 FOO',
        '300 FOO_BAR',
        '400 foo-bar',
        '500 foo.bar',
        '600 foo&bar'
    ])),
    bool: v.optional(v.unknown())
});

export const vModelWithEnumFromDescription = v.object({
    test: v.optional(v.pipe(v.number(), v.integer()))
});

export const vModelWithNestedEnums = v.object({
    dictionaryWithEnum: v.optional(v.object({})),
    dictionaryWithEnumFromDescription: v.optional(v.object({})),
    arrayWithEnum: v.optional(v.array(v.picklist([
        'Success',
        'Warning',
        'Error'
    ]))),
    arrayWithDescription: v.optional(v.array(v.pipe(v.number(), v.integer())))
});

export const vModelWithProperties = v.object({
    required: v.string(),
    requiredAndReadOnly: v.pipe(v.string(), v.readonly()),
    string: v.optional(v.string()),
    number: v.optional(v.number()),
    boolean: v.optional(v.boolean()),
    reference: v.optional(vModelWithString),
    'property with space': v.optional(v.string()),
    default: v.optional(v.string()),
    try: v.optional(v.string()),
    '@namespace.string': v.optional(v.pipe(v.string(), v.readonly())),
    '@namespace.integer': v.optional(v.pipe(v.pipe(v.number(), v.integer()), v.readonly()))
});

export const vModelWithReference = v.object({
    prop: v.optional(vModelWithProperties)
});

export const vModelWithArray = v.object({
    prop: v.optional(v.array(vModelWithString)),
    propWithFile: v.optional(v.array(v.string())),
    propWithNumber: v.optional(v.array(v.number()))
});

export const vModelWithDictionary = v.object({
    prop: v.optional(v.object({}))
});

export const vModelWithCircularReference: v.GenericSchema = v.object({
    prop: v.optional(v.lazy(() => {
        return vModelWithCircularReference;
    }))
});

export const vModelWithNestedProperties = v.object({
    first: v.pipe(v.object({
        second: v.pipe(v.object({
            third: v.pipe(v.string(), v.readonly())
        }), v.readonly())
    }), v.readonly())
});

export const vModelWithDuplicateProperties = v.object({
    prop: v.optional(vModelWithString)
});

export const vModelWithOrderedProperties = v.object({
    zebra: v.optional(v.string()),
    apple: v.optional(v.string()),
    hawaii: v.optional(v.string())
});

export const vModelWithDuplicateImports = v.object({
    propA: v.optional(vModelWithString),
    propB: v.optional(vModelWithString),
    propC: v.optional(vModelWithString)
});

export const vModelThatExtends = v.intersect([
    vModelWithString,
    v.object({
        propExtendsA: v.optional(v.string()),
        propExtendsB: v.optional(vModelWithString)
    })
]);

export const vModelThatExtendsExtends = v.intersect([
    vModelWithString,
    vModelThatExtends,
    v.object({
        propExtendsC: v.optional(v.string()),
        propExtendsD: v.optional(vModelWithString)
    })
]);

export const vDefault = v.object({
    name: v.optional(v.string())
});

export const vModelWithPattern = v.object({
    key: v.pipe(v.string(), v.maxLength(64), v.regex(/^[a-zA-Z0-9_]*$/)),
    name: v.pipe(v.string(), v.maxLength(255)),
    enabled: v.optional(v.pipe(v.boolean(), v.readonly())),
    modified: v.optional(v.pipe(v.pipe(v.string(), v.isoDateTime()), v.readonly())),
    id: v.optional(v.pipe(v.string(), v.regex(/^\d{2}-\d{3}-\d{4}$/))),
    text: v.optional(v.pipe(v.string(), v.regex(/^\w+$/))),
    patternWithSingleQuotes: v.optional(v.pipe(v.string(), v.regex(/^[a-zA-Z0-9']*$/))),
    patternWithNewline: v.optional(v.pipe(v.string(), v.regex(/aaa\nbbb/))),
    patternWithBacktick: v.optional(v.pipe(v.string(), v.regex(/aaa`bbb/)))
});

export const vParameterActivityParams = v.object({
    description: v.optional(v.string()),
    graduate_id: v.optional(v.pipe(v.number(), v.integer())),
    organization_id: v.optional(v.pipe(v.number(), v.integer())),
    parent_activity: v.optional(v.pipe(v.number(), v.integer())),
    post_id: v.optional(v.pipe(v.number(), v.integer()))
});

export const vResponsePostActivityResponse = v.object({
    description: v.optional(v.string()),
    graduate_id: v.optional(v.pipe(v.number(), v.integer())),
    organization_id: v.optional(v.pipe(v.number(), v.integer())),
    parent_activity_id: v.optional(v.pipe(v.number(), v.integer())),
    post_id: v.optional(v.pipe(v.number(), v.integer()))
});

export const vFailureFailure = v.object({
    error: v.optional(v.string()),
    message: v.optional(v.string()),
    reference_code: v.optional(v.string())
});

export const vCallWithResponseAndNoContentResponseResponse = v.union([
    v.number(),
    v.unknown()
]);

export const vCallWithResponseResponse = vModelWithString;

export const vCallWithDuplicateResponsesResponse = vModelWithString;

export const vCallWithResponsesResponse = v.union([
    v.object({
        '@namespace.string': v.optional(v.pipe(v.string(), v.readonly())),
        '@namespace.integer': v.optional(v.pipe(v.pipe(v.number(), v.integer()), v.readonly())),
        value: v.optional(v.pipe(v.array(vModelWithString), v.readonly()))
    }),
    vModelThatExtends,
    vModelThatExtendsExtends
]);

export const vTypesResponse = v.union([
    v.number(),
    v.string(),
    v.boolean(),
    v.object({})
]);

export const vComplexTypesResponse = v.array(vModelWithString);

export const vNonAsciiæøåÆøÅöôêÊ字符串Response = vNonAsciiStringæøåÆøÅöôêÊ字符串;

export const vPostApiVbyApiVersionBodyResponse = vResponsePostActivityResponse;