// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

/**
 * Testing multiline comments in string: First line
 * Second line
 *
 * Fourth line
 */
export const zCommentWithBreaks = z.number().int();

/**
 * Testing backticks in string: `backticks` and ```multiple backticks``` should work
 */
export const zCommentWithBackticks = z.number().int();

/**
 * Testing backticks and quotes in string: `backticks`, 'quotes', "double quotes" and ```multiple backticks``` should work
 */
export const zCommentWithBackticksAndQuotes = z.number().int();

/**
 * Testing slashes in string: \backwards\\\ and /forwards/// should work
 */
export const zCommentWithSlashes = z.number().int();

/**
 * Testing expression placeholders in string: ${expression} should work
 */
export const zCommentWithExpressionPlaceholders = z.number().int();

/**
 * Testing quotes in string: 'single quote''' and "double quotes""" should work
 */
export const zCommentWithQuotes = z.number().int();

/**
 * Testing reserved characters in string: * inline * and ** inline ** should work
 */
export const zCommentWithReservedCharacters = z.number().int();

/**
 * This is a simple number
 */
export const zSimpleInteger = z.number().int();

/**
 * This is a simple boolean
 */
export const zSimpleBoolean = z.boolean();

/**
 * This is a simple string
 */
export const zSimpleString = z.string();

/**
 * A string with non-ascii (unicode) characters valid in typescript identifiers (æøåÆØÅöÔèÈ字符串)
 */
export const zNonAsciiStringæøåÆøÅöôêÊ字符串 = z.string();

/**
 * This is a simple file
 */
export const zSimpleFile = z.string();

/**
 * This is a model with one string property
 */
export const zModelWithString = z.object({
    prop: z.string().optional()
});

export const zSimpleReference = zModelWithString;

/**
 * This is a simple string
 */
export const zSimpleStringWithPattern = z.string().max(64).regex(/^[a-zA-Z0-9_]*$/);

/**
 * This is a simple enum with strings
 */
export const zEnumWithStrings = z.enum([
    'Success',
    'Warning',
    'Error',
    "'Single Quote'",
    '"Double Quotes"',
    'Non-ascii: øæåôöØÆÅÔÖ字符串'
]);

/**
 * This is a simple enum with numbers
 */
export const zEnumWithNumbers = z.unknown();

/**
 * Success=1,Warning=2,Error=3
 */
export const zEnumFromDescription = z.number();

/**
 * This is a simple enum with numbers
 */
export const zEnumWithExtensions = z.unknown();

/**
 * This is a simple array with numbers
 */
export const zArrayWithNumbers = z.array(z.number().int());

/**
 * This is a simple array with booleans
 */
export const zArrayWithBooleans = z.array(z.boolean());

/**
 * This is a simple array with strings
 */
export const zArrayWithStrings = z.array(z.string());

/**
 * This is a simple array with references
 */
export const zArrayWithReferences = z.array(zModelWithString);

/**
 * This is a simple array containing an array
 */
export const zArrayWithArray = z.array(z.array(zModelWithString));

/**
 * This is a simple array with properties
 */
export const zArrayWithProperties = z.array(z.object({
    foo: z.string().optional(),
    bar: z.string().optional()
}));

/**
 * This is a string dictionary
 */
export const zDictionaryWithString = z.object({});

/**
 * This is a string reference
 */
export const zDictionaryWithReference = z.object({});

/**
 * This is a complex dictionary
 */
export const zDictionaryWithArray = z.object({});

/**
 * This is a string dictionary
 */
export const zDictionaryWithDictionary = z.object({});

/**
 * This is a complex dictionary
 */
export const zDictionaryWithProperties = z.object({});

/**
 * This is a type-only model that defines Date as a string
 */
export const zDate = z.string();

/**
 * This is a model with one number property
 */
export const zModelWithInteger = z.object({
    prop: z.number().int().optional()
});

/**
 * This is a model with one boolean property
 */
export const zModelWithBoolean = z.object({
    prop: z.boolean().optional()
});

/**
 * This is a model with one string property
 */
export const zModelWithStringError = z.object({
    prop: z.string().optional()
});

/**
 * This is a model with one string property
 */
export const zModelWithNullableString = z.object({
    nullableProp: z.union([
        z.string(),
        z.null()
    ]).optional(),
    nullableRequiredProp: z.union([
        z.string(),
        z.null()
    ])
});

/**
 * This is a model with one enum
 */
export const zModelWithEnum = z.object({
    test: z.enum([
        'Success',
        'Warning',
        'Error',
        'ØÆÅ字符串'
    ]).optional(),
    statusCode: z.enum([
        '100',
        '200 FOO',
        '300 FOO_BAR',
        '400 foo-bar',
        '500 foo.bar',
        '600 foo&bar'
    ]).optional(),
    bool: z.unknown().optional()
});

/**
 * This is a model with one enum
 */
export const zModelWithEnumFromDescription = z.object({
    test: z.number().int().optional()
});

/**
 * This is a model with nested enums
 */
export const zModelWithNestedEnums = z.object({
    dictionaryWithEnum: z.object({}).optional(),
    dictionaryWithEnumFromDescription: z.object({}).optional(),
    arrayWithEnum: z.array(z.enum([
        'Success',
        'Warning',
        'Error'
    ])).optional(),
    arrayWithDescription: z.array(z.number().int()).optional()
});

/**
 * This is a model with one nested property
 */
export const zModelWithProperties = z.object({
    required: z.string(),
    requiredAndReadOnly: z.string().readonly(),
    string: z.string().optional(),
    number: z.number().optional(),
    boolean: z.boolean().optional(),
    reference: zModelWithString.optional(),
    'property with space': z.string().optional(),
    default: z.string().optional(),
    try: z.string().optional(),
    '@namespace.string': z.string().readonly().optional(),
    '@namespace.integer': z.number().int().readonly().optional()
});

/**
 * This is a model with one property containing a reference
 */
export const zModelWithReference = z.object({
    prop: zModelWithProperties.optional()
});

/**
 * This is a model with one property containing an array
 */
export const zModelWithArray = z.object({
    prop: z.array(zModelWithString).optional(),
    propWithFile: z.array(z.string()).optional(),
    propWithNumber: z.array(z.number()).optional()
});

/**
 * This is a model with one property containing a dictionary
 */
export const zModelWithDictionary = z.object({
    prop: z.object({}).optional()
});

/**
 * This is a model with one property containing a circular reference
 */
export const zModelWithCircularReference: z.AnyZodObject = z.object({
    prop: z.lazy(() => {
        return zModelWithCircularReference;
    }).optional()
});

/**
 * This is a model with one nested property
 */
export const zModelWithNestedProperties = z.object({
    first: z.object({
        second: z.object({
            third: z.string().readonly()
        }).readonly()
    }).readonly()
});

/**
 * This is a model with duplicated properties
 */
export const zModelWithDuplicateProperties = z.object({
    prop: zModelWithString.optional()
});

/**
 * This is a model with ordered properties
 */
export const zModelWithOrderedProperties = z.object({
    zebra: z.string().optional(),
    apple: z.string().optional(),
    hawaii: z.string().optional()
});

/**
 * This is a model with duplicated imports
 */
export const zModelWithDuplicateImports = z.object({
    propA: zModelWithString.optional(),
    propB: zModelWithString.optional(),
    propC: zModelWithString.optional()
});

/**
 * This is a model that extends another model
 */
export const zModelThatExtends = zModelWithString.and(z.object({
    propExtendsA: z.string().optional(),
    propExtendsB: zModelWithString.optional()
}));

/**
 * This is a model that extends another model
 */
export const zModelThatExtendsExtends = zModelWithString.and(zModelThatExtends).and(z.object({
    propExtendsC: z.string().optional(),
    propExtendsD: zModelWithString.optional()
}));

export const zDefault = z.object({
    name: z.string().optional()
});

/**
 * This is a model that contains a some patterns
 */
export const zModelWithPattern = z.object({
    key: z.string().max(64).regex(/^[a-zA-Z0-9_]*$/),
    name: z.string().max(255),
    enabled: z.boolean().readonly().optional(),
    modified: z.string().datetime().readonly().optional(),
    id: z.string().regex(/^\d{2}-\d{3}-\d{4}$/).optional(),
    text: z.string().regex(/^\w+$/).optional(),
    patternWithSingleQuotes: z.string().regex(/^[a-zA-Z0-9']*$/).optional(),
    patternWithNewline: z.string().regex(/aaa\nbbb/).optional(),
    patternWithBacktick: z.string().regex(/aaa`bbb/).optional()
});

export const zParameterActivityParams = z.object({
    description: z.string().optional(),
    graduate_id: z.number().int().optional(),
    organization_id: z.number().int().optional(),
    parent_activity: z.number().int().optional(),
    post_id: z.number().int().optional()
});

export const zResponsePostActivityResponse = z.object({
    description: z.string().optional(),
    graduate_id: z.number().int().optional(),
    organization_id: z.number().int().optional(),
    parent_activity_id: z.number().int().optional(),
    post_id: z.number().int().optional()
});

export const zFailureFailure = z.object({
    error: z.string().optional(),
    message: z.string().optional(),
    reference_code: z.string().optional()
});

/**
 * Testing multiline comments in string: First line
 * Second line
 *
 * Fourth line
 */
export const zCallWithDescriptionsParameterParameterWithBreaksData = z.string();

/**
 * Testing backticks in string: `backticks` and ```multiple backticks``` should work
 */
export const zCallWithDescriptionsParameterParameterWithBackticksData = z.string();

/**
 * Testing slashes in string: \backwards\\\ and /forwards/// should work
 */
export const zCallWithDescriptionsParameterParameterWithSlashesData = z.string();

/**
 * Testing expression placeholders in string: ${expression} should work
 */
export const zCallWithDescriptionsParameterParameterWithExpressionPlaceholdersData = z.string();

/**
 * Testing quotes in string: 'single quote''' and "double quotes""" should work
 */
export const zCallWithDescriptionsParameterParameterWithQuotesData = z.string();

/**
 * Testing reserved characters in string: * inline * and ** inline ** should work
 */
export const zCallWithDescriptionsParameterParameterWithReservedCharactersData = z.string();

/**
 * This is the parameter that goes into the header
 */
export const zCallWithParametersParameterParameterHeaderData = z.string();

/**
 * This is the parameter that goes into the path
 */
export const zCallWithParametersParameterParameterPathData = z.string();

/**
 * api-version should be required in standalone clients
 */
export const zCallWithParametersParameterApiVersionData = z.string();

/**
 * This is the parameter that goes into the query params
 */
export const zCallWithParametersParameterParameterQueryData = z.string();

/**
 * This is the parameter that goes into the request header
 */
export const zCallWithWeirdParameterNamesParameterParameterHeaderData = z.string();

/**
 * This is the parameter that goes into the path
 */
export const zCallWithWeirdParameterNamesParameterParameterPath1Data = z.string();

/**
 * This is the parameter that goes into the path
 */
export const zCallWithWeirdParameterNamesParameterParameterPath2Data = z.string();

/**
 * This is the parameter that goes into the path
 */
export const zCallWithWeirdParameterNamesParameterParameterPath3Data = z.string();

/**
 * api-version should be required in standalone clients
 */
export const zCallWithWeirdParameterNamesParameterApiVersionData = z.string();

/**
 * This is the parameter with a reserved keyword
 */
export const zCallWithWeirdParameterNamesParameterDefaultData = z.string();

/**
 * This is the parameter that goes into the request query params
 */
export const zCallWithWeirdParameterNamesParameterParameterQueryData = z.string();

/**
 * This is a simple string with default value
 */
export const zCallWithDefaultParametersParameterParameterStringData = z.string().default('Hello World!');

/**
 * This is a simple number with default value
 */
export const zCallWithDefaultParametersParameterParameterNumberData = z.number().default(123);

/**
 * This is a simple boolean with default value
 */
export const zCallWithDefaultParametersParameterParameterBooleanData = z.boolean().default(true);

/**
 * This is a simple enum with default value
 */
export const zCallWithDefaultParametersParameterParameterEnumData = z.enum([
    'Success',
    'Warning',
    'Error'
]);

/**
 * This is a model with one string property
 */
export const zCallWithDefaultParametersParameterParameterModelData = z.object({
    prop: z.string().optional()
}).default({
    prop: 'Hello World!'
});

/**
 * This is a simple string that is optional with default value
 */
export const zCallWithDefaultOptionalParametersParameterParameterStringData = z.string().default('Hello World!');

/**
 * This is a simple number that is optional with default value
 */
export const zCallWithDefaultOptionalParametersParameterParameterNumberData = z.number().default(123);

/**
 * This is a simple boolean that is optional with default value
 */
export const zCallWithDefaultOptionalParametersParameterParameterBooleanData = z.boolean().default(true);

/**
 * This is a simple enum that is optional with default value
 */
export const zCallWithDefaultOptionalParametersParameterParameterEnumData = z.enum([
    'Success',
    'Warning',
    'Error'
]);

/**
 * This is a optional string with default
 */
export const zCallToTestOrderOfParamsParameterParameterOptionalStringWithDefaultData = z.string().default('Hello World!');

/**
 * This is a optional string with empty default
 */
export const zCallToTestOrderOfParamsParameterParameterOptionalStringWithEmptyDefaultData = z.string().default('');

/**
 * This is a optional string with no default
 */
export const zCallToTestOrderOfParamsParameterParameterOptionalStringWithNoDefaultData = z.string();

/**
 * This is a string with default
 */
export const zCallToTestOrderOfParamsParameterParameterStringWithDefaultData = z.string().default('Hello World!');

/**
 * This is a string with empty default
 */
export const zCallToTestOrderOfParamsParameterParameterStringWithEmptyDefaultData = z.string().default('');

/**
 * This is a string with no default
 */
export const zCallToTestOrderOfParamsParameterParameterStringWithNoDefaultData = z.string();

/**
 * This is a string that can be null with no default
 */
export const zCallToTestOrderOfParamsParameterParameterStringNullableWithNoDefaultData = z.union([
    z.string(),
    z.null()
]);

/**
 * This is a string that can be null with default
 */
export const zCallToTestOrderOfParamsParameterParameterStringNullableWithDefaultData = z.union([
    z.string(),
    z.null()
]).default(null);

export const zCallWithResponseAndNoContentResponseResponse = z.union([
    z.number(),
    z.unknown()
]);

/**
 * Message for default response
 */
export const zCallWithResponseResponse = zModelWithString;

/**
 * Message for 201 response
 */
export const zCallWithDuplicateResponsesResponse = zModelWithString;

export const zCallWithResponsesResponse = z.union([
    z.object({
        '@namespace.string': z.string().readonly().optional(),
        '@namespace.integer': z.number().int().readonly().optional(),
        value: z.array(zModelWithString).readonly().optional()
    }),
    zModelThatExtends,
    zModelThatExtendsExtends
]);

/**
 * This is an array parameter that is sent as csv format (comma-separated values)
 */
export const zCollectionFormatParameterParameterArrayCsvData = z.array(z.string());

/**
 * This is an array parameter that is sent as ssv format (space-separated values)
 */
export const zCollectionFormatParameterParameterArraySsvData = z.array(z.string());

/**
 * This is an array parameter that is sent as tsv format (tab-separated values)
 */
export const zCollectionFormatParameterParameterArrayTsvData = z.array(z.string());

/**
 * This is an array parameter that is sent as pipes format (pipe-separated values)
 */
export const zCollectionFormatParameterParameterArrayPipesData = z.array(z.string());

/**
 * This is an array parameter that is sent as multi format (multiple parameter instances)
 */
export const zCollectionFormatParameterParameterArrayMultiData = z.array(z.string());

/**
 * This is a number parameter
 */
export const zTypesParameterIdData = z.number().int();

/**
 * This is a number parameter
 */
export const zTypesParameterParameterNumberData = z.number().default(123);

/**
 * This is a string parameter
 */
export const zTypesParameterParameterStringData = z.string().default('default');

/**
 * This is a boolean parameter
 */
export const zTypesParameterParameterBooleanData = z.boolean().default(true);

/**
 * This is an array parameter
 */
export const zTypesParameterParameterArrayData = z.array(z.string());

/**
 * This is a dictionary parameter
 */
export const zTypesParameterParameterDictionaryData = z.object({});

/**
 * This is an enum parameter
 */
export const zTypesParameterParameterEnumData = z.enum([
    'Success',
    'Warning',
    'Error'
]);

export const zTypesResponse = z.union([
    z.number(),
    z.string(),
    z.boolean(),
    z.object({})
]);

/**
 * Parameter containing object
 */
export const zComplexTypesParameterParameterObjectData = z.object({
    first: z.object({
        second: z.object({
            third: z.string().optional()
        }).optional()
    }).optional()
});

/**
 * This is a model with one string property
 */
export const zComplexTypesParameterParameterReferenceData = z.object({
    prop: z.string().optional()
});

/**
 * Successful response
 */
export const zComplexTypesResponse = z.array(zModelWithString);

/**
 * Status code to return
 */
export const zTestErrorCodeParameterStatusData = z.string();

/**
 * Dummy input param
 */
export const zNonAsciiæøåÆøÅöôêÊ字符串ParameterNonAsciiParamæøåÆøÅöôêÊData = z.number().int();

/**
 * Successful response
 */
export const zNonAsciiæøåÆøÅöôêÊ字符串Response = zNonAsciiStringæøåÆøÅöôêÊ字符串;

/**
 * Body should not be unknown
 */
export const zPostApiVbyApiVersionBodyData = zParameterActivityParams;

/**
 * OK
 */
export const zPostApiVbyApiVersionBodyResponse = zResponsePostActivityResponse;