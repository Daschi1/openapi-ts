// This file is auto-generated by @hey-api/openapi-ts

import * as v from 'valibot';

export const v400 = v.string();

export const vCamelCaseCommentWithBreaks = v.pipe(v.number(), v.integer());

export const vCommentWithBreaks = v.pipe(v.number(), v.integer());

export const vCommentWithBackticks = v.pipe(v.number(), v.integer());

export const vCommentWithBackticksAndQuotes = v.pipe(v.number(), v.integer());

export const vCommentWithSlashes = v.pipe(v.number(), v.integer());

export const vCommentWithExpressionPlaceholders = v.pipe(v.number(), v.integer());

export const vCommentWithQuotes = v.pipe(v.number(), v.integer());

export const vCommentWithReservedCharacters = v.pipe(v.number(), v.integer());

export const vSimpleInteger = v.pipe(v.number(), v.integer());

export const vSimpleBoolean = v.boolean();

export const vSimpleString = v.string();

export const vNonAsciiStringæøåÆøÅöôêÊ字符串 = v.string();

export const vSimpleFile = v.string();

export const vModelWithString = v.object({
    prop: v.optional(v.string())
});

export const vSimpleReference = vModelWithString;

export const vSimpleStringWithPattern = v.union([
    v.pipe(v.string(), v.maxLength(64), v.regex(/^[a-zA-Z0-9_]*$/)),
    v.null()
]);

export const vEnumWithStrings = v.picklist([
    'Success',
    'Warning',
    'Error',
    "'Single Quote'",
    '"Double Quotes"',
    'Non-ascii: øæåôöØÆÅÔÖ字符串'
]);

export const vEnumWithReplacedCharacters = v.picklist([
    "'Single Quote'",
    '"Double Quotes"',
    'øæåôöØÆÅÔÖ字符串',
    ''
]);

export const vEnumWithNumbers = v.unknown();

export const vEnumFromDescription = v.number();

export const vEnumWithExtensions = v.unknown();

export const vEnumWithXEnumNames = v.unknown();

export const vArrayWithNumbers = v.array(v.pipe(v.number(), v.integer()));

export const vArrayWithBooleans = v.array(v.boolean());

export const vArrayWithStrings = v.optional(v.array(v.string()), ['test']);

export const vArrayWithReferences = v.array(vModelWithString);

export const vArrayWithArray = v.array(v.array(vModelWithString));

export const vArrayWithProperties = v.array(v.object({
    '16x16': v.optional(vCamelCaseCommentWithBreaks),
    bar: v.optional(v.string())
}));

export const vArrayWithAnyOfProperties = v.array(v.unknown());

export const vAnyOfAnyAndNull = v.object({
    data: v.optional(v.unknown())
});

export const vAnyOfArrays = v.object({
    results: v.optional(v.array(v.unknown()))
});

export const vDictionaryWithString = v.object({});

export const vDictionaryWithPropertiesAndAdditionalProperties = v.object({
    foo: v.optional(v.number()),
    bar: v.optional(v.boolean())
});

export const vDictionaryWithReference = v.object({});

export const vDictionaryWithArray = v.object({});

export const vDictionaryWithDictionary = v.object({});

export const vDictionaryWithProperties = v.object({});

export const vModelWithInteger = v.object({
    prop: v.optional(v.pipe(v.number(), v.integer()))
});

export const vModelWithBoolean = v.object({
    prop: v.optional(v.boolean())
});

export const vModelWithStringError = v.object({
    prop: v.optional(v.string())
});

export const vModelFromZendesk = v.string();

export const vModelWithNullableString = v.object({
    nullableProp1: v.optional(v.union([
        v.string(),
        v.null()
    ])),
    nullableRequiredProp1: v.union([
        v.string(),
        v.null()
    ]),
    nullableProp2: v.optional(v.union([
        v.string(),
        v.null()
    ])),
    nullableRequiredProp2: v.union([
        v.string(),
        v.null()
    ]),
    'foo_bar-enum': v.optional(v.picklist([
        'Success',
        'Warning',
        'Error',
        'ØÆÅ字符串'
    ]))
});

export const vModelWithEnum = v.object({
    'foo_bar-enum': v.optional(v.picklist([
        'Success',
        'Warning',
        'Error',
        'ØÆÅ字符串'
    ])),
    statusCode: v.optional(v.picklist([
        '100',
        '200 FOO',
        '300 FOO_BAR',
        '400 foo-bar',
        '500 foo.bar',
        '600 foo&bar'
    ])),
    bool: v.optional(v.unknown())
});

export const vModelWithEnumWithHyphen = v.object({
    'foo-bar-baz-qux': v.optional(v.picklist([
        '3.0'
    ]))
});

export const vModelWithEnumFromDescription = v.object({
    test: v.optional(v.pipe(v.number(), v.integer()))
});

export const vModelWithNestedEnums = v.object({
    dictionaryWithEnum: v.optional(v.object({})),
    dictionaryWithEnumFromDescription: v.optional(v.object({})),
    arrayWithEnum: v.optional(v.array(v.picklist([
        'Success',
        'Warning',
        'Error'
    ]))),
    arrayWithDescription: v.optional(v.array(v.pipe(v.number(), v.integer()))),
    'foo_bar-enum': v.optional(v.picklist([
        'Success',
        'Warning',
        'Error',
        'ØÆÅ字符串'
    ]))
});

export const vModelWithProperties = v.object({
    required: v.string(),
    requiredAndReadOnly: v.pipe(v.string(), v.readonly()),
    requiredAndNullable: v.union([
        v.string(),
        v.null()
    ]),
    string: v.optional(v.string()),
    number: v.optional(v.number()),
    boolean: v.optional(v.boolean()),
    reference: v.optional(vModelWithString),
    'property with space': v.optional(v.string()),
    default: v.optional(v.string()),
    try: v.optional(v.string()),
    '@namespace.string': v.optional(v.pipe(v.string(), v.readonly())),
    '@namespace.integer': v.optional(v.pipe(v.pipe(v.number(), v.integer()), v.readonly()))
});

export const vModelWithReference = v.object({
    prop: v.optional(vModelWithProperties)
});

export const vModelWithReadOnlyAndWriteOnly = v.object({
    foo: v.string(),
    bar: v.pipe(v.string(), v.readonly()),
    baz: v.string()
});

export const vModelWithArrayReadOnlyAndWriteOnly = v.object({
    prop: v.optional(v.array(vModelWithReadOnlyAndWriteOnly)),
    propWithFile: v.optional(v.array(v.string())),
    propWithNumber: v.optional(v.array(v.number()))
});

export const vModelWithArray = v.object({
    prop: v.optional(v.array(vModelWithString)),
    propWithFile: v.optional(v.array(v.string())),
    propWithNumber: v.optional(v.array(v.number()))
});

export const vModelWithDictionary = v.object({
    prop: v.optional(v.object({}))
});

export const vDeprecatedModel = v.object({
    prop: v.optional(v.string())
});

export const vModelWithCircularReference: v.GenericSchema = v.object({
    prop: v.optional(v.lazy(() => {
        return vModelWithCircularReference;
    }))
});

export const vCompositionWithOneOf = v.object({
    propA: v.optional(v.union([
        vModelWithString,
        vModelWithEnum,
        vModelWithArray,
        vModelWithDictionary
    ]))
});

export const vCompositionWithOneOfAnonymous = v.object({
    propA: v.optional(v.union([
        v.object({
            propA: v.optional(v.string())
        }),
        v.string(),
        v.pipe(v.number(), v.integer())
    ]))
});

export const vModelCircle = v.object({
    kind: v.string(),
    radius: v.optional(v.number())
});

export const vModelSquare = v.object({
    kind: v.string(),
    sideLength: v.optional(v.number())
});

export const vCompositionWithOneOfDiscriminator = v.union([
    v.intersect([
        v.object({
            kind: v.literal('circle')
        }),
        vModelCircle
    ]),
    v.intersect([
        v.object({
            kind: v.literal('square')
        }),
        vModelSquare
    ])
]);

export const vCompositionWithAnyOf = v.object({
    propA: v.optional(v.union([
        vModelWithString,
        vModelWithEnum,
        vModelWithArray,
        vModelWithDictionary
    ]))
});

export const vCompositionWithAnyOfAnonymous = v.object({
    propA: v.optional(v.union([
        v.object({
            propA: v.optional(v.string())
        }),
        v.string(),
        v.pipe(v.number(), v.integer())
    ]))
});

export const vCompositionWithNestedAnyAndTypeNull = v.object({
    propA: v.optional(v.union([
        v.array(v.union([
            vModelWithDictionary,
            v.null()
        ])),
        v.array(v.union([
            vModelWithArray,
            v.null()
        ]))
    ]))
});

export const v3eNum1Период = v.picklist([
    'Bird',
    'Dog'
]);

export const vConstValue = v.picklist([
    'ConstValue'
]);

export const vCompositionWithNestedAnyOfAndNull = v.object({
    propA: v.optional(v.union([
        v.array(v.unknown()),
        v.null()
    ]))
});

export const vCompositionWithOneOfAndNullable = v.object({
    propA: v.optional(v.union([
        v.object({
            boolean: v.optional(v.boolean())
        }),
        vModelWithEnum,
        vModelWithArray,
        vModelWithDictionary,
        v.null()
    ]))
});

export const vCompositionWithOneOfAndSimpleDictionary = v.object({
    propA: v.optional(v.union([
        v.boolean(),
        v.object({})
    ]))
});

export const vCompositionWithOneOfAndSimpleArrayDictionary = v.object({
    propA: v.optional(v.union([
        v.boolean(),
        v.object({})
    ]))
});

export const vCompositionWithOneOfAndComplexArrayDictionary = v.object({
    propA: v.optional(v.union([
        v.boolean(),
        v.object({})
    ]))
});

export const vCompositionWithAllOfAndNullable = v.object({
    propA: v.optional(v.union([
        v.intersect([
            v.object({
                boolean: v.optional(v.boolean())
            }),
            vModelWithEnum,
            vModelWithArray,
            vModelWithDictionary
        ]),
        v.null()
    ]))
});

export const vCompositionWithAnyOfAndNullable = v.object({
    propA: v.optional(v.union([
        v.object({
            boolean: v.optional(v.boolean())
        }),
        vModelWithEnum,
        vModelWithArray,
        vModelWithDictionary,
        v.null()
    ]))
});

export const vCompositionBaseModel = v.object({
    firstName: v.optional(v.string()),
    lastname: v.optional(v.string())
});

export const vCompositionExtendedModel = v.intersect([
    vCompositionBaseModel,
    v.object({
        age: v.number(),
        firstName: v.string(),
        lastname: v.string()
    })
]);

export const vModelWithNestedProperties = v.object({
    first: v.pipe(v.union([
        v.pipe(v.object({
            second: v.pipe(v.union([
                v.pipe(v.object({
                    third: v.pipe(v.union([
                        v.pipe(v.string(), v.readonly()),
                        v.null()
                    ]), v.readonly())
                }), v.readonly()),
                v.null()
            ]), v.readonly())
        }), v.readonly()),
        v.null()
    ]), v.readonly())
});

export const vModelWithDuplicateProperties = v.object({
    prop: v.optional(vModelWithString)
});

export const vModelWithOrderedProperties = v.object({
    zebra: v.optional(v.string()),
    apple: v.optional(v.string()),
    hawaii: v.optional(v.string())
});

export const vModelWithDuplicateImports = v.object({
    propA: v.optional(vModelWithString),
    propB: v.optional(vModelWithString),
    propC: v.optional(vModelWithString)
});

export const vModelThatExtends = v.intersect([
    vModelWithString,
    v.object({
        propExtendsA: v.optional(v.string()),
        propExtendsB: v.optional(vModelWithString)
    })
]);

export const vModelThatExtendsExtends = v.intersect([
    vModelWithString,
    vModelThatExtends,
    v.object({
        propExtendsC: v.optional(v.string()),
        propExtendsD: v.optional(vModelWithString)
    })
]);

export const vModelWithPattern = v.object({
    key: v.pipe(v.string(), v.maxLength(64), v.regex(/^[a-zA-Z0-9_]*$/)),
    name: v.pipe(v.string(), v.maxLength(255)),
    enabled: v.optional(v.pipe(v.boolean(), v.readonly())),
    modified: v.optional(v.pipe(v.pipe(v.string(), v.isoDateTime()), v.readonly())),
    id: v.optional(v.pipe(v.string(), v.regex(/^\d{2}-\d{3}-\d{4}$/))),
    text: v.optional(v.pipe(v.string(), v.regex(/^\w+$/))),
    patternWithSingleQuotes: v.optional(v.pipe(v.string(), v.regex(/^[a-zA-Z0-9']*$/))),
    patternWithNewline: v.optional(v.pipe(v.string(), v.regex(/aaa\nbbb/))),
    patternWithBacktick: v.optional(v.pipe(v.string(), v.regex(/aaa`bbb/)))
});

export const vFile = v.object({
    id: v.optional(v.pipe(v.pipe(v.string(), v.minLength(1)), v.readonly())),
    updated_at: v.optional(v.pipe(v.pipe(v.string(), v.isoDateTime()), v.readonly())),
    created_at: v.optional(v.pipe(v.pipe(v.string(), v.isoDateTime()), v.readonly())),
    mime: v.pipe(v.string(), v.minLength(1), v.maxLength(24)),
    file: v.optional(v.pipe(v.pipe(v.string(), v.url()), v.readonly()))
});

export const vDefault = v.object({
    name: v.optional(v.string())
});

export const vPageable = v.object({
    page: v.optional(v.pipe(v.number(), v.integer(), v.minValue(0)), 0),
    size: v.optional(v.pipe(v.number(), v.integer(), v.minValue(1))),
    sort: v.optional(v.array(v.string()))
});

export const vFreeFormObjectWithoutAdditionalProperties = v.object({});

export const vFreeFormObjectWithAdditionalPropertiesEqTrue = v.object({});

export const vFreeFormObjectWithAdditionalPropertiesEqEmptyObject = v.object({});

export const vModelWithConst = v.object({
    String: v.optional(v.picklist([
        'String'
    ])),
    number: v.optional(v.unknown()),
    null: v.optional(v.unknown()),
    withType: v.optional(v.picklist([
        'Some string'
    ]))
});

export const vModelWithAdditionalPropertiesEqTrue = v.object({
    prop: v.optional(v.string())
});

export const vNestedAnyOfArraysNullable = v.object({
    nullableArray: v.optional(v.union([
        v.array(v.unknown()),
        v.null()
    ]))
});

export const vSimpleParameter = v.unknown();

export const vCompositionWithOneOfAndProperties = v.intersect([
    v.union([
        v.object({
            foo: vSimpleParameter
        }),
        v.object({
            bar: vNonAsciiStringæøåÆøÅöôêÊ字符串
        })
    ]),
    v.object({
        baz: v.union([
            v.pipe(v.number(), v.integer(), v.minValue(0)),
            v.null()
        ]),
        qux: v.pipe(v.number(), v.integer(), v.minValue(0))
    })
]);

export const vNullableObject = v.optional(v.union([
    v.object({
        foo: v.optional(v.string())
    }),
    v.null()
]), null);

export const vCharactersInDescription = v.string();

export const vModelWithNullableObject = v.object({
    data: v.optional(vNullableObject)
});

export const vModelWithOneOfEnum = v.union([
    v.object({
        foo: v.picklist([
            'Bar'
        ])
    }),
    v.object({
        foo: v.picklist([
            'Baz'
        ])
    }),
    v.object({
        foo: v.picklist([
            'Qux'
        ])
    }),
    v.object({
        content: v.pipe(v.string(), v.isoDateTime()),
        foo: v.picklist([
            'Quux'
        ])
    }),
    v.object({
        content: v.tuple([
            v.pipe(v.string(), v.isoDateTime()),
            v.pipe(v.string(), v.isoDateTime())
        ]),
        foo: v.picklist([
            'Corge'
        ])
    })
]);

export const vModelWithNestedArrayEnumsDataFoo = v.picklist([
    'foo',
    'bar'
]);

export const vModelWithNestedArrayEnumsDataBar = v.picklist([
    'baz',
    'qux'
]);

export const vModelWithNestedArrayEnumsData = v.object({
    foo: v.optional(v.array(vModelWithNestedArrayEnumsDataFoo)),
    bar: v.optional(v.array(vModelWithNestedArrayEnumsDataBar))
});

export const vModelWithNestedArrayEnums = v.object({
    array_strings: v.optional(v.array(v.string())),
    data: v.optional(vModelWithNestedArrayEnumsData)
});

export const vModelWithNestedCompositionEnums = v.object({
    foo: v.optional(vModelWithNestedArrayEnumsDataFoo)
});

export const vModelWithConstantSizeArray = v.tuple([
    v.number(),
    v.number()
]);

export const vModelWithAnyOfConstantSizeArray = v.tuple([
    v.union([
        v.number(),
        v.string()
    ]),
    v.union([
        v.number(),
        v.string()
    ]),
    v.union([
        v.number(),
        v.string()
    ])
]);

export const vModelWithPrefixItemsConstantSizeArray = v.array(v.unknown());

export const vModelWithAnyOfConstantSizeArrayNullable = v.tuple([
    v.union([
        v.number(),
        v.null(),
        v.string()
    ]),
    v.union([
        v.number(),
        v.null(),
        v.string()
    ]),
    v.union([
        v.number(),
        v.null(),
        v.string()
    ])
]);

export const vImport = v.string();

export const vModelWithAnyOfConstantSizeArrayWithNSizeAndOptions = v.tuple([
    v.union([
        v.number(),
        vImport
    ]),
    v.union([
        v.number(),
        vImport
    ])
]);

export const vModelWithAnyOfConstantSizeArrayAndIntersect = v.tuple([
    v.intersect([
        v.number(),
        v.string()
    ]),
    v.intersect([
        v.number(),
        v.string()
    ])
]);

export const vModelWithNumericEnumUnion = v.object({
    value: v.optional(v.unknown())
});

export const vModelWithBackticksInDescription = v.object({
    template: v.optional(v.string())
});

export const vModelWithOneOfAndProperties = v.intersect([
    v.union([
        vSimpleParameter,
        vNonAsciiStringæøåÆøÅöôêÊ字符串
    ]),
    v.object({
        baz: v.union([
            v.pipe(v.number(), v.integer(), v.minValue(0)),
            v.null()
        ]),
        qux: v.pipe(v.number(), v.integer(), v.minValue(0))
    })
]);

export const vParameterSimpleParameterUnused = v.string();

export const vPostServiceWithEmptyTagResponse = v.string();

export const vPostServiceWithEmptyTagResponse2 = v.string();

export const vDeleteFooData = v.string();

export const vDeleteFooData2 = v.string();

export const vSchemaWithFormRestrictedKeys = v.object({
    description: v.optional(v.string()),
    'x-enum-descriptions': v.optional(v.string()),
    'x-enum-varnames': v.optional(v.string()),
    'x-enumNames': v.optional(v.string()),
    title: v.optional(v.string()),
    object: v.optional(v.object({
        description: v.optional(v.string()),
        'x-enum-descriptions': v.optional(v.string()),
        'x-enum-varnames': v.optional(v.string()),
        'x-enumNames': v.optional(v.string()),
        title: v.optional(v.string())
    })),
    array: v.optional(v.array(v.object({
        description: v.optional(v.string()),
        'x-enum-descriptions': v.optional(v.string()),
        'x-enum-varnames': v.optional(v.string()),
        'x-enumNames': v.optional(v.string()),
        title: v.optional(v.string())
    })))
});

export const vIoK8sApimachineryPkgApisMetaV1Preconditions = v.object({
    resourceVersion: v.optional(v.string()),
    uid: v.optional(v.string())
});

export const vIoK8sApimachineryPkgApisMetaV1DeleteOptions = v.object({
    preconditions: v.optional(vIoK8sApimachineryPkgApisMetaV1Preconditions)
});

export const vAdditionalPropertiesUnknownIssue = v.object({});

export const vAdditionalPropertiesUnknownIssue2 = v.object({});

export const vAdditionalPropertiesUnknownIssue3 = v.intersect([
    v.string(),
    v.object({
        entries: v.object({})
    })
]);

export const vAdditionalPropertiesIntegerIssue = v.object({
    value: v.pipe(v.number(), v.integer())
});

export const vGenericSchemaDuplicateIssue1SystemBoolean = v.object({
    item: v.optional(v.boolean()),
    error: v.optional(v.union([
        v.string(),
        v.null()
    ])),
    hasError: v.optional(v.pipe(v.boolean(), v.readonly())),
    data: v.optional(v.object({}))
});

export const vGenericSchemaDuplicateIssue1SystemString = v.object({
    item: v.optional(v.union([
        v.string(),
        v.null()
    ])),
    error: v.optional(v.union([
        v.string(),
        v.null()
    ])),
    hasError: v.optional(v.pipe(v.boolean(), v.readonly()))
});

export const vOneOfAllOfIssue = v.union([
    v.intersect([
        v.union([
            vConstValue,
            vGenericSchemaDuplicateIssue1SystemBoolean
        ]),
        v3eNum1Период
    ]),
    vGenericSchemaDuplicateIssue1SystemString
]);

export const vImportResponse = v.union([
    vModelFromZendesk,
    vModelWithReadOnlyAndWriteOnly
]);

export const vApiVVersionODataControllerCountResponse = vModelFromZendesk;

export const vGetApiVbyApiVersionSimpleOperationResponse = v.number();

export const vPostCallWithOptionalParamResponse = v.union([
    v.number(),
    v.void()
]);

export const vCallWithNoContentResponseResponse = v.void();

export const vCallWithResponseAndNoContentResponseResponse = v.union([
    v.number(),
    v.void()
]);

export const vDummyAResponse = v400;

export const vDummyBResponse = v.void();

export const vCallWithResponseResponse = vImport;

export const vCallWithDuplicateResponsesResponse = v.union([
    v.intersect([
        vModelWithBoolean,
        vModelWithInteger
    ]),
    vModelWithString
]);

export const vCallWithResponsesResponse = v.union([
    v.object({
        '@namespace.string': v.optional(v.pipe(v.string(), v.readonly())),
        '@namespace.integer': v.optional(v.pipe(v.pipe(v.number(), v.integer()), v.readonly())),
        value: v.optional(v.pipe(v.array(vModelWithString), v.readonly()))
    }),
    vModelThatExtends,
    vModelThatExtendsExtends
]);

export const vTypesResponse = v.union([
    v.number(),
    v.string(),
    v.boolean(),
    v.object({})
]);

export const vUploadFileResponse = v.boolean();

export const vFileResponseResponse = v.string();

export const vComplexTypesResponse = v.array(vModelWithString);

export const vMultipartResponseResponse = v.object({
    file: v.optional(v.string()),
    metadata: v.optional(v.object({
        foo: v.optional(v.string()),
        bar: v.optional(v.string())
    }))
});

export const vComplexParamsResponse = vModelWithString;

export const vNonAsciiæøåÆøÅöôêÊ字符串Response = v.array(vNonAsciiStringæøåÆøÅöôêÊ字符串);