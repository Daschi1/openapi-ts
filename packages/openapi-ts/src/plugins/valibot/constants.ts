import { compiler } from '../../compiler';

export const identifiers = {
  /**
   * {@link https://valibot.dev/api/#actions Actions}
   */
  actions: {
    args: compiler.identifier({ text: 'args' }),
    base64: compiler.identifier({ text: 'base64' }),
    bic: compiler.identifier({ text: 'bic' }),
    brand: compiler.identifier({ text: 'brand' }),
    bytes: compiler.identifier({ text: 'bytes' }),
    check: compiler.identifier({ text: 'check' }),
    checkItems: compiler.identifier({ text: 'checkItems' }),
    creditCard: compiler.identifier({ text: 'creditCard' }),
    cuid2: compiler.identifier({ text: 'cuid2' }),
    decimal: compiler.identifier({ text: 'decimal' }),
    description: compiler.identifier({ text: 'description' }),
    digits: compiler.identifier({ text: 'digits' }),
    email: compiler.identifier({ text: 'email' }),
    emoji: compiler.identifier({ text: 'emoji' }),
    empty: compiler.identifier({ text: 'empty' }),
    endsWith: compiler.identifier({ text: 'endsWith' }),
    entries: compiler.identifier({ text: 'entries' }),
    everyItem: compiler.identifier({ text: 'everyItem' }),
    excludes: compiler.identifier({ text: 'excludes' }),
    filterItems: compiler.identifier({ text: 'filterItems' }),
    findItem: compiler.identifier({ text: 'findItem' }),
    finite: compiler.identifier({ text: 'finite' }),
    flavor: compiler.identifier({ text: 'flavor' }),
    graphemes: compiler.identifier({ text: 'graphemes' }),
    gtValue: compiler.identifier({ text: 'gtValue' }),
    hash: compiler.identifier({ text: 'hash' }),
    hexColor: compiler.identifier({ text: 'hexColor' }),
    hexadecimal: compiler.identifier({ text: 'hexadecimal' }),
    imei: compiler.identifier({ text: 'imei' }),
    includes: compiler.identifier({ text: 'includes' }),
    integer: compiler.identifier({ text: 'integer' }),
    ip: compiler.identifier({ text: 'ip' }),
    ipv4: compiler.identifier({ text: 'ipv4' }),
    ipv6: compiler.identifier({ text: 'ipv6' }),
    isoDate: compiler.identifier({ text: 'isoDate' }),
    isoDateTime: compiler.identifier({ text: 'isoDateTime' }),
    isoTime: compiler.identifier({ text: 'isoTime' }),
    isoTimeSecond: compiler.identifier({ text: 'isoTimeSecond' }),
    isoTimestamp: compiler.identifier({ text: 'isoTimestamp' }),
    isoWeek: compiler.identifier({ text: 'isoWeek' }),
    length: compiler.identifier({ text: 'length' }),
    ltValue: compiler.identifier({ text: 'ltValue' }),
    mac: compiler.identifier({ text: 'mac' }),
    mac48: compiler.identifier({ text: 'mac48' }),
    mac64: compiler.identifier({ text: 'mac64' }),
    mapItems: compiler.identifier({ text: 'mapItems' }),
    maxBytes: compiler.identifier({ text: 'maxBytes' }),
    maxEntries: compiler.identifier({ text: 'maxEntries' }),
    maxGraphemes: compiler.identifier({ text: 'maxGraphemes' }),
    maxLength: compiler.identifier({ text: 'maxLength' }),
    maxSize: compiler.identifier({ text: 'maxSize' }),
    maxValue: compiler.identifier({ text: 'maxValue' }),
    maxWords: compiler.identifier({ text: 'maxWords' }),
    metadata: compiler.identifier({ text: 'metadata' }),
    mimeType: compiler.identifier({ text: 'mimeType' }),
    minBytes: compiler.identifier({ text: 'minBytes' }),
    minEntries: compiler.identifier({ text: 'minEntries' }),
    minGraphemes: compiler.identifier({ text: 'minGraphemes' }),
    minLength: compiler.identifier({ text: 'minLength' }),
    minSize: compiler.identifier({ text: 'minSize' }),
    minValue: compiler.identifier({ text: 'minValue' }),
    minWords: compiler.identifier({ text: 'minWords' }),
    multipleOf: compiler.identifier({ text: 'multipleOf' }),
    nanoid: compiler.identifier({ text: 'nanoid' }),
    nonEmpty: compiler.identifier({ text: 'nonEmpty' }),
    normalize: compiler.identifier({ text: 'normalize' }),
    notBytes: compiler.identifier({ text: 'notBytes' }),
    notEntries: compiler.identifier({ text: 'notEntries' }),
    notGraphemes: compiler.identifier({ text: 'notGraphemes' }),
    notLength: compiler.identifier({ text: 'notLength' }),
    notSize: compiler.identifier({ text: 'notSize' }),
    notValue: compiler.identifier({ text: 'notValue' }),
    notValues: compiler.identifier({ text: 'notValues' }),
    notWords: compiler.identifier({ text: 'notWords' }),
    octal: compiler.identifier({ text: 'octal' }),
    parseJson: compiler.identifier({ text: 'parseJson' }),
    partialCheck: compiler.identifier({ text: 'partialCheck' }),
    rawCheck: compiler.identifier({ text: 'rawCheck' }),
    rawTransform: compiler.identifier({ text: 'rawTransform' }),
    readonly: compiler.identifier({ text: 'readonly' }),
    reduceItems: compiler.identifier({ text: 'reduceItems' }),
    regex: compiler.identifier({ text: 'regex' }),
    returns: compiler.identifier({ text: 'returns' }),
    rfcEmail: compiler.identifier({ text: 'rfcEmail' }),
    safeInteger: compiler.identifier({ text: 'safeInteger' }),
    size: compiler.identifier({ text: 'size' }),
    slug: compiler.identifier({ text: 'slug' }),
    someItem: compiler.identifier({ text: 'someItem' }),
    sortItems: compiler.identifier({ text: 'sortItems' }),
    startsWith: compiler.identifier({ text: 'startsWith' }),
    stringifyJson: compiler.identifier({ text: 'stringifyJson' }),
    title: compiler.identifier({ text: 'title' }),
    toLowerCase: compiler.identifier({ text: 'toLowerCase' }),
    toMaxValue: compiler.identifier({ text: 'toMaxValue' }),
    toMinValue: compiler.identifier({ text: 'toMinValue' }),
    toUpperCase: compiler.identifier({ text: 'toUpperCase' }),
    transform: compiler.identifier({ text: 'transform' }),
    trim: compiler.identifier({ text: 'trim' }),
    trimEnd: compiler.identifier({ text: 'trimEnd' }),
    trimStart: compiler.identifier({ text: 'trimStart' }),
    ulid: compiler.identifier({ text: 'ulid' }),
    url: compiler.identifier({ text: 'url' }),
    uuid: compiler.identifier({ text: 'uuid' }),
    value: compiler.identifier({ text: 'value' }),
    values: compiler.identifier({ text: 'values' }),
    words: compiler.identifier({ text: 'words' }),
  },
  /**
   * {@link https://valibot.dev/api/#async Async}
   */
  async: {
    // TODO: implement if necessary
  },
  /**
   * {@link https://valibot.dev/api/#methods Methods}
   */
  methods: {
    assert: compiler.identifier({ text: 'assert' }),
    config: compiler.identifier({ text: 'config' }),
    fallback: compiler.identifier({ text: 'fallback' }),
    flatten: compiler.identifier({ text: 'flatten' }),
    forward: compiler.identifier({ text: 'forward' }),
    getDefault: compiler.identifier({ text: 'getDefault' }),
    getDefaults: compiler.identifier({ text: 'getDefaults' }),
    getDescription: compiler.identifier({ text: 'getDescription' }),
    getFallback: compiler.identifier({ text: 'getFallback' }),
    getFallbacks: compiler.identifier({ text: 'getFallbacks' }),
    getMetadata: compiler.identifier({ text: 'getMetadata' }),
    getTitle: compiler.identifier({ text: 'getTitle' }),
    is: compiler.identifier({ text: 'is' }),
    keyof: compiler.identifier({ text: 'keyof' }),
    message: compiler.identifier({ text: 'message' }),
    omit: compiler.identifier({ text: 'omit' }),
    parse: compiler.identifier({ text: 'parse' }),
    parser: compiler.identifier({ text: 'parser' }),
    partial: compiler.identifier({ text: 'partial' }),
    pick: compiler.identifier({ text: 'pick' }),
    pipe: compiler.identifier({ text: 'pipe' }),
    required: compiler.identifier({ text: 'required' }),
    safeParse: compiler.identifier({ text: 'safeParse' }),
    safeParser: compiler.identifier({ text: 'safeParser' }),
    summarize: compiler.identifier({ text: 'summarize' }),
    unwrap: compiler.identifier({ text: 'unwrap' }),
  },
  /**
   * {@link https://valibot.dev/api/#schemas Schemas}
   */
  schemas: {
    any: compiler.identifier({ text: 'any' }),
    array: compiler.identifier({ text: 'array' }),
    bigInt: compiler.identifier({ text: 'bigint' }),
    blob: compiler.identifier({ text: 'blob' }),
    boolean: compiler.identifier({ text: 'boolean' }),
    custom: compiler.identifier({ text: 'custom' }),
    date: compiler.identifier({ text: 'date' }),
    enum: compiler.identifier({ text: 'enum' }),
    exactOptional: compiler.identifier({ text: 'exactOptional' }),
    file: compiler.identifier({ text: 'file' }),
    function: compiler.identifier({ text: 'function' }),
    instance: compiler.identifier({ text: 'instance' }),
    intersect: compiler.identifier({ text: 'intersect' }),
    lazy: compiler.identifier({ text: 'lazy' }),
    literal: compiler.identifier({ text: 'literal' }),
    looseObject: compiler.identifier({ text: 'looseObject' }),
    looseTuple: compiler.identifier({ text: 'looseTuple' }),
    map: compiler.identifier({ text: 'map' }),
    nan: compiler.identifier({ text: 'nan' }),
    never: compiler.identifier({ text: 'never' }),
    nonNullable: compiler.identifier({ text: 'nonNullable' }),
    nonNullish: compiler.identifier({ text: 'nonNullish' }),
    nonOptional: compiler.identifier({ text: 'nonOptional' }),
    null: compiler.identifier({ text: 'null' }),
    nullable: compiler.identifier({ text: 'nullable' }),
    nullish: compiler.identifier({ text: 'nullish' }),
    number: compiler.identifier({ text: 'number' }),
    object: compiler.identifier({ text: 'object' }),
    objectWithRest: compiler.identifier({ text: 'objectWithRest' }),
    optional: compiler.identifier({ text: 'optional' }),
    picklist: compiler.identifier({ text: 'picklist' }),
    promise: compiler.identifier({ text: 'promise' }),
    record: compiler.identifier({ text: 'record' }),
    set: compiler.identifier({ text: 'set' }),
    strictObject: compiler.identifier({ text: 'strictObject' }),
    strictTuple: compiler.identifier({ text: 'strictTuple' }),
    string: compiler.identifier({ text: 'string' }),
    symbol: compiler.identifier({ text: 'symbol' }),
    tuple: compiler.identifier({ text: 'tuple' }),
    tupleWithRest: compiler.identifier({ text: 'tupleWithRest' }),
    undefined: compiler.identifier({ text: 'undefined' }),
    undefinedable: compiler.identifier({ text: 'undefinedable' }),
    union: compiler.identifier({ text: 'union' }),
    unknown: compiler.identifier({ text: 'unknown' }),
    variant: compiler.identifier({ text: 'variant' }),
    void: compiler.identifier({ text: 'void' }),
  },
  /**
   * {@link https://valibot.dev/api/#storages Storages}
   */
  storages: {
    // TODO: implement if necessary
  },
  /**
   * {@link https://valibot.dev/api/#types Types}
   */
  types: {
    // TODO: implement if necessary
    GenericSchema: compiler.identifier({ text: 'GenericSchema' }),
  },
  /**
   * {@link https://valibot.dev/api/#utils Utils}
   */
  utils: {
    // TODO: implement if necessary
  },
  v: compiler.identifier({ text: 'v' }),
};

export const valibotId = 'valibot';
